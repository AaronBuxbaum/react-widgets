webpackJsonp(["path---api-calendar"],{"./.cache/json/api-calendar.json":function(e,a){e.exports={data:{componentMetadata:{displayName:"Calendar",doclets:{public:!0},props:[{name:"activeId",defaultValue:null,doclets:{ignore:!0},type:{name:"string",value:null,raw:null},description:null},{name:"disabled",defaultValue:null,doclets:{},type:{name:"bool",value:null,raw:"CustomPropTypes.disabled"},description:null},{name:"readOnly",defaultValue:null,doclets:{},type:{name:"bool",value:null,raw:"CustomPropTypes.disabled"},description:{childMarkdownRemark:{html:"<p>Controls the read-only state of the Calendar.</p>"}}},{name:"onChange",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>A callback fired when the current <code>value</code> changes.</p>"}}},{name:"value",defaultValue:{value:"null",computed:!1},doclets:{},type:{name:"instanceOf",value:"Date",raw:null},description:{childMarkdownRemark:{html:"<p>Controls the current value of the Calendar.</p>"}}},{name:"min",defaultValue:{value:"new Date(1900, 0, 1)",computed:!1},doclets:{example:"['prop', ['min', 'new Date()']]"},type:{name:"instanceOf",value:"Date",raw:null},description:{childMarkdownRemark:{html:"<p>The minimum date that the Calendar can navigate from.</p>"}}},{name:"max",defaultValue:{value:"new Date(2099, 11, 31)",computed:!1},doclets:{example:"['prop', ['max', 'new Date()']]"},type:{name:"instanceOf",value:"Date",raw:null},description:{childMarkdownRemark:{html:"<p>The maximum date that the Calendar can navigate to.</p>"}}},{name:"currentDate",defaultValue:null,doclets:{},type:{name:"instanceOf",value:"Date",raw:null},description:{childMarkdownRemark:{html:"<p>Default current date at which the calendar opens. If none is provided, opens at today's date or the <code>value</code> date (if any).</p>"}}},{name:"onCurrentDateChange",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Change event Handler that is called when the currentDate is changed. The handler is called with the currentDate object.</p>"}}},{name:"view",defaultValue:null,doclets:{type:'{("month"|"year"|"decade"|"century")}',controllable:"onViewChange"},type:{name:"enum",value:['"month"','"year"','"decade"','"century"'],raw:"function(props, ...args) {\n  return PropTypes.oneOf(props.views || VIEW_OPTIONS)(props, ...args);\n}"},description:{childMarkdownRemark:{html:"<p>Controls the currently displayed calendar view. Use <code>defaultView</code> to set a unique starting view.</p>"}}},{name:"views",defaultValue:{value:"Object.keys(views).map(k => views[k])",computed:!0},doclets:{type:'array<"month"|"year"|"decade"|"century">'},type:{name:'array<"month"|"year"|"decade"|"century">',value:{name:"enum",computed:!0,value:"VIEW_OPTIONS"},raw:null},description:{childMarkdownRemark:{html:"<p>Defines a list of views the Calendar can traverse through, starting with the\nfirst in the list to the last.</p>"}}},{name:"onViewChange",defaultValue:null,doclets:{controllable:"view"},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>A callback fired when the <code>view</code> changes.</p>"}}},{name:"onNavigate",defaultValue:null,doclets:{type:"function(date: ?Date, direction: string, view: string)"},type:{name:"function(date: ?Date, direction: string, view: string)",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Callback fired when the Calendar navigates between views, or forward and backwards in time.</p>"}}},{name:"culture",defaultValue:null,doclets:{},type:{name:"string",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Set the culture of the Calendar, passed to the configured localizer.</p>"}}},{name:"autoFocus",defaultValue:null,doclets:{},type:{name:"bool",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Pass focus to the Calendar when it mounts.</p>"}}},{name:"footer",defaultValue:{value:"true",computed:!1},doclets:{example:"['prop', ['footer', true]]"},type:{name:"bool",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Show or hide the Calendar footer.</p>"}}},{name:"dayComponent",defaultValue:null,doclets:{},type:{name:"union",value:["ReactComponent","string"],raw:"CustomPropTypes.elementType"},description:{childMarkdownRemark:{html:"<p>Provide a custom component to render the days of the month. The Component is provided the following props</p>\n<ul>\n<li><code>date</code>: a <code>Date</code> object for the day of the month to render</li>\n<li><code>label</code>: a formatted <code>string</code> of the date to render. To adjust the format of the <code>label</code> string use the <code>dateFormat</code> prop, listed below.</li>\n</ul>"}}},{name:"headerFormat",defaultValue:null,doclets:{example:"['dateFormat', ['headerFormat', \"{ date: 'medium' }\"]]"},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for the header button of the month view.</p>"}}},{name:"footerFormat",defaultValue:null,doclets:{example:"['dateFormat', ['footerFormat', \"{ date: 'medium' }\", \"date => 'Today is: ' + formatter(date)\"]]"},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for the Calendar footer, formats today's Date as a string.</p>"}}},{name:"dayFormat",defaultValue:null,doclets:{example:"['prop', { dayFormat: \"day => \\n['ðŸŽ‰', 'M', 'T','W','Th', 'F', 'ðŸŽ‰'][day.getDay()]\" }]"},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:'<p>A formatter calendar days of the week, the default formats each day as a Narrow name: "Mo", "Tu", etc.</p>'}}},{name:"dateFormat",defaultValue:null,doclets:{example:"['prop', { dateFormat: \"dt => String(dt.getDate())\" }]"},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for day of the month</p>"}}},{name:"monthFormat",defaultValue:null,doclets:{example:"['dateFormat', ['monthFormat', \"{ raw: 'MMMM' }\", null, { defaultView: '\"year\"' }]]"},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for month name.</p>"}}},{name:"yearFormat",defaultValue:null,doclets:{example:"['dateFormat', ['yearFormat', \"{ raw: 'yy' }\", null, { defaultView: '\"decade\"' }]]"},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for month name.</p>"}}},{name:"decadeFormat",defaultValue:null,doclets:{},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for decade, the default formats the first and last year of the decade like: 2000 - 2009.</p>"}}},{name:"centuryFormat",defaultValue:null,doclets:{},type:{name:"union",value:["string","(value: Date, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.dateFormat"},description:{childMarkdownRemark:{html:"<p>A formatter for century, the default formats the first and last year of the century like: 1900 - 1999.</p>"}}},{name:"messages",defaultValue:null,doclets:{},type:{name:"shape",value:{moveBack:{name:"string",required:!1},moveForward:{name:"string",required:!1}},raw:null},description:{childMarkdownRemark:{html:"<p>Object hash containing display text and/or text for screen readers.\nUse the <code>messages</code> object to localize widget text or provide custom rendering.</p>"}}},{name:"onKeyDown",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The native <code>onKeyDown</code> event, called <code>preventDefault</code> will prevent any custom behavior, included keyboard shortcuts.</p>"}}},{name:"tabIndex",defaultValue:{value:"'0'",computed:!1},doclets:{ignore:!0},type:{name:"any",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The HTML <code>tabindex</code> attribute, controls the order in which focus moves\nvia the TAB key</p>"}}}],description:{childMarkdownRemark:{frontmatter:{shortcuts:null},html:""}}}},pathContext:{displayName:"Calendar"}}}});
//# sourceMappingURL=path---api-calendar-0d1e945f02f726e45aeb.js.map