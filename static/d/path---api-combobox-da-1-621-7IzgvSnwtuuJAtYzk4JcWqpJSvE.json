{"data":{"componentMetadata":{"displayName":"Combobox","doclets":{"public":true},"composes":["./util/Filter"],"props":[{"name":"value","defaultValue":{"value":"''","computed":false},"doclets":{},"type":{"name":"any","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the current value of the Combobox.</p>"}}},{"name":"onChange","defaultValue":null,"doclets":{},"type":{"name":"func","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the current <code class=\"language-text\">value</code> changes.</p>"}}},{"name":"open","defaultValue":{"value":"false","computed":false},"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the visibility of the Combobox popup. Use <code class=\"language-text\">defaultOpen</code>\nto set an initial value for uncontrolled widgets.</p>"}}},{"name":"onToggle","defaultValue":null,"doclets":{},"type":{"name":"func","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>A callback fired with the Combobox's popup visibility is about to change.</p>\n<p>Use in conjunction with the <code class=\"language-text\">open</code> prop to manually control the popup visibility.</p>"}}},{"name":"itemComponent","defaultValue":null,"doclets":{},"type":{"name":"union","value":["ReactComponent","string"],"raw":"CustomPropTypes.elementType"},"description":{"childMarkdownRemark":{"html":"<p>Customize the rendering of each Combobox list item.</p>"}}},{"name":"listComponent","defaultValue":{"value":"List","computed":true},"doclets":{},"type":{"name":"union","value":["ReactComponent","string"],"raw":"CustomPropTypes.elementType"},"description":null},{"name":"groupComponent","defaultValue":null,"doclets":{},"type":{"name":"union","value":["ReactComponent","string"],"raw":"CustomPropTypes.elementType"},"description":{"childMarkdownRemark":{"html":"<p>Customize the rendering of the group headings when <code class=\"language-text\">groupBy</code> is active.</p>"}}},{"name":"groupBy","defaultValue":null,"doclets":{},"type":{"name":"union","value":["string","(dataItem?) => string"],"raw":"CustomPropTypes.accessor"},"description":{"childMarkdownRemark":{"html":"<p>To display grouped lists, specify a property name, or accesor function,\nwhose value is used to group the <code class=\"language-text\">data</code> list.</p>\n<p>The <code class=\"language-text\">groupBy</code> value is also used as the text for group headings when <code class=\"language-text\">groupComponent</code>\nis not provided.</p>"}}},{"name":"data","defaultValue":{"value":"[]","computed":false},"doclets":{},"type":{"name":"array","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>An array of possible values for the Combobox.</p>\n<p><strong>Tip:</strong> When <code class=\"language-text\">data</code> is an array of <code class=\"language-text\">objects</code> consider specifying\n<code class=\"language-text\">textField</code> and <code class=\"language-text\">valueField</code> as well.</p>"}}},{"name":"valueField","defaultValue":null,"doclets":{},"type":{"name":"union","value":["string","(dataItem?) => string"],"raw":"CustomPropTypes.accessor"},"description":{"childMarkdownRemark":{"html":"<p>A property name that provides the value of the <code class=\"language-text\">data</code> items.\nThis value is used to uniquely distinigush items from others in the <code class=\"language-text\">data</code> list.</p>\n<p>Generally, <code class=\"language-text\">valueField</code> points to an Id field, or other unique identifier.\nWhen not provided, the referential identity of each data item is used.</p>"}}},{"name":"textField","defaultValue":null,"doclets":{},"type":{"name":"union","value":["string","(dataItem?) => string"],"raw":"CustomPropTypes.accessor"},"description":{"childMarkdownRemark":{"html":"<p>A property name, or accessor function, that provides the text content of the <code class=\"language-text\">data</code>\nitems. The Combobox will filter data based on this value as well as use it as the\ndefault display value for list items and selected values.</p>"}}},{"name":"name","defaultValue":null,"doclets":{},"type":{"name":"string","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>The HTML <code class=\"language-text\">name</code> attribute, passed directly to the input element.</p>"}}},{"name":"onSelect","defaultValue":null,"doclets":{"type":"{(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}"},"type":{"name":"union","value":[{"name":"dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => voi"}],"raw":null},"description":{"childMarkdownRemark":{"html":"<p>This handler fires when an item has been selected from the list. It fires before the <code class=\"language-text\">onChange</code> handler and fires\nregardless of whether the value has actually changed.</p>"}}},{"name":"autoFocus","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Pass focus to the Combobox when it mounts.</p>"}}},{"name":"disabled","defaultValue":null,"doclets":{},"type":{"name":"union","value":["bool","Array"],"raw":"CustomPropTypes.disabled.acceptsArray"},"description":null},{"name":"readOnly","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":"CustomPropTypes.disabled"},"description":{"childMarkdownRemark":{"html":"<p>Controls the read-only state of the Combobox.</p>"}}},{"name":"suggest","defaultValue":{"value":"false","computed":false},"doclets":{},"type":{"name":"custom","value":null,"raw":"Filter.propTypes.filter"},"description":{"childMarkdownRemark":{"html":"<p>When <code class=\"language-text\">true</code> the Combobox will suggest, or fill in, values as you type. The suggestions\nare always \"startsWith\", meaning it will search from the start of the <code class=\"language-text\">textField</code> property</p>"}}},{"name":"busy","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the loading/busy spinner visibility. Presentational only! Useful\nfor providing visual feedback while data is being loaded.</p>"}}},{"name":"selectIcon","defaultValue":{"value":"caretDown","computed":true},"doclets":{},"type":{"name":"node","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Specify the element used to render the select (down arrow) icon.</p>"}}},{"name":"busySpinner","defaultValue":null,"doclets":{},"type":{"name":"node","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Specify the element used to render the busy indicator</p>"}}},{"name":"delay","defaultValue":{"value":"500","computed":false},"doclets":{},"type":{"name":"number","value":null,"raw":null},"description":null},{"name":"dropUp","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the opening direction of the Combobox popup.</p>"}}},{"name":"popupTransition","defaultValue":null,"doclets":{},"type":{"name":"union","value":["ReactComponent","string"],"raw":"CustomPropTypes.elementType"},"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">Transition</code> component from react-transition-group v2. The\nprovided component will be used instead of the default <code class=\"language-text\">SlideDownTransition</code> for\nfully customizable animations. The transition component is also injected with a\n<code class=\"language-text\">dropUp</code> prop indicating the direction it should open.</p>"}}},{"name":"placeholder","defaultValue":null,"doclets":{},"type":{"name":"string","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Text to display in the input when the value is empty.</p>"}}},{"name":"containerClassName","defaultValue":null,"doclets":{},"type":{"name":"string","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Adds a css class to the input container element.</p>"}}},{"name":"inputProps","defaultValue":null,"doclets":{},"type":{"name":"object","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>An object of props that is passed directly to the underlying input component.</p>"}}},{"name":"listProps","defaultValue":null,"doclets":{},"type":{"name":"object","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>An object of props that is passed directly to the underlying <code class=\"language-text\">List</code> component.</p>"}}},{"name":"isRtl","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the read direction of the Combobox.</p>\n<p><strong>Tip:</strong> You can also set the direction for all widgets at once, by exposing\n<code class=\"language-text\">isRtl</code> on <a href=\"https://facebook.github.io/react/docs/context.html\">context</a> in a\ncommon parent component, such as your application root.</p>"}}},{"name":"messages","defaultValue":null,"doclets":{},"type":{"name":"shape","value":{"openCombobox":{"name":"union","raw":"CustomPropTypes.message","required":false,"value":["string","(props?) => string"]},"emptyList":{"name":"union","raw":"CustomPropTypes.message","required":false,"value":["string","(props?) => string"]},"emptyFilter":{"name":"union","raw":"CustomPropTypes.message","required":false,"value":["string","(props?) => string"]}},"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Object hash containing display text and/or text for screen readers.\nUse the <code class=\"language-text\">messages</code> object to localize widget text or provide custom rendering.</p>"}}},{"name":"filter","defaultValue":{"value":"false","computed":false},"doclets":{},"type":null,"description":{"childMarkdownRemark":{"html":"<p>Enable and customize filtering behavior for the Combobox. Specify\none of the built-in methods (<code class=\"language-text\">&quot;startsWith&quot;</code> <code class=\"language-text\">&quot;endsWith&quot;</code> <code class=\"language-text\">&quot;contains&quot;</code>)\nor provide a function that returns <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> for each passed in item\n(analogous to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/array/filter\">array.filter</a> builtin)</p>\n<p>You can explicitly disable filtering by setting <code class=\"language-text\">filter</code> to <code class=\"language-text\">false</code>.\nundefined</p>"}}}],"description":{"childMarkdownRemark":{"frontmatter":{"localized":null,"shortcuts":[{"key":"alt + down arrow","label":"open combobox"},{"key":"alt + up arrow","label":"close combobox"},{"key":"down arrow","label":"move focus to next item"},{"key":"up arrow","label":"move focus to previous item"},{"key":"home","label":"move focus to first item"},{"key":"end","label":"move focus to last item"},{"key":"enter","label":"select focused item"},{"key":"any key","label":"search list for item starting with key"}]},"html":"<p>Select an item from the list, or input a custom value. The Combobox can also make suggestions as you type.</p>"}}}},"pageContext":{"jsonName":"api-combobox-da1","internalComponentName":"ComponentApiCombobox","path":"/api/Combobox/","component":"/Users/jason/src/react-widgets/www/src/templates/component.js","componentChunkName":"component---src-templates-component-js","context":{"displayName":"Combobox","publicComponents":["SelectList","NumberPicker","Calendar","Combobox","DropdownList","DateTimePicker","Multiselect"]},"updatedAt":1532796253646,"pluginCreator___NODE":"Plugin default-site-plugin","pluginCreatorId":"Plugin default-site-plugin","componentPath":"/Users/jason/src/react-widgets/www/src/templates/component.js","displayName":"Combobox","publicComponents":["SelectList","NumberPicker","Calendar","Combobox","DropdownList","DateTimePicker","Multiselect"]}}