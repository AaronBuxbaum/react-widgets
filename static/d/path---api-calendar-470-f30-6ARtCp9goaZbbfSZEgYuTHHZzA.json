{"data":{"componentMetadata":{"displayName":"Calendar","doclets":{"public":true},"composes":null,"props":[{"name":"activeId","defaultValue":null,"doclets":{"ignore":true},"type":{"name":"string","value":null,"raw":null},"description":null},{"name":"disabled","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":"CustomPropTypes.disabled"},"description":null},{"name":"readOnly","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":"CustomPropTypes.disabled"},"description":{"childMarkdownRemark":{"html":"<p>Controls the read-only state of the Calendar.</p>"}}},{"name":"onChange","defaultValue":null,"doclets":{"example":"['onChangePicker', [ ['new Date()'] ]]"},"type":{"name":"func","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the current <code class=\"language-text\">value</code> changes.</p>"}}},{"name":"value","defaultValue":{"value":"null","computed":false},"doclets":{"example":"['valuePicker', [ ['new Date()'] ]]"},"type":{"name":"instanceOf","value":"Date","raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the current value of the Calendar.</p>"}}},{"name":"min","defaultValue":{"value":"new Date(1900, 0, 1)","computed":false},"doclets":{"example":"['prop', ['min', 'new Date()']]"},"type":{"name":"instanceOf","value":"Date","raw":null},"description":{"childMarkdownRemark":{"html":"<p>The minimum date that the Calendar can navigate from.</p>"}}},{"name":"max","defaultValue":{"value":"new Date(2099, 11, 31)","computed":false},"doclets":{"example":"['prop', ['max', 'new Date()']]"},"type":{"name":"instanceOf","value":"Date","raw":null},"description":{"childMarkdownRemark":{"html":"<p>The maximum date that the Calendar can navigate to.</p>"}}},{"name":"currentDate","defaultValue":null,"doclets":{},"type":{"name":"instanceOf","value":"Date","raw":null},"description":{"childMarkdownRemark":{"html":"<p>Default current date at which the calendar opens. If none is provided, opens at today's date or the <code class=\"language-text\">value</code> date (if any).</p>"}}},{"name":"onCurrentDateChange","defaultValue":null,"doclets":{},"type":{"name":"func","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Change event Handler that is called when the currentDate is changed. The handler is called with the currentDate object.</p>"}}},{"name":"navigatePrevIcon","defaultValue":null,"doclets":{},"type":{"name":"node","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Specify the navigate into the past header icon</p>"}}},{"name":"navigateNextIcon","defaultValue":null,"doclets":{},"type":{"name":"node","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Specify the navigate into the future header icon</p>"}}},{"name":"view","defaultValue":null,"doclets":{"type":"{(\"month\"|\"year\"|\"decade\"|\"century\")}","controllable":"onViewChange"},"type":{"name":"enum","value":[{"value":"\"month\"","computed":false},{"value":"\"year\"","computed":false},{"value":"\"decade\"","computed":false},{"value":"\"century\"","computed":false}],"raw":"function(props, ...args) {\n  return PropTypes.oneOf(props.views || VIEW_OPTIONS)(props, ...args)\n}"},"description":{"childMarkdownRemark":{"html":"<p>Controls the currently displayed calendar view. Use <code class=\"language-text\">defaultView</code> to set a unique starting view.</p>"}}},{"name":"views","defaultValue":{"value":"['month', 'year', 'decade', 'century']","computed":false},"doclets":{"type":"array<\"month\"|\"year\"|\"decade\"|\"century\">"},"type":{"name":"array<\"month\"|\"year\"|\"decade\"|\"century\">","value":{"name":"enum","value":[{"value":"'month'","computed":false},{"value":"'year'","computed":false},{"value":"'decade'","computed":false},{"value":"'century'","computed":false}]},"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Defines a list of views the Calendar can traverse through, starting with the\nfirst in the list to the last.</p>"}}},{"name":"onViewChange","defaultValue":null,"doclets":{"controllable":"view"},"type":{"name":"func","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the <code class=\"language-text\">view</code> changes.</p>"}}},{"name":"onNavigate","defaultValue":null,"doclets":{"type":"function(date: ?Date, direction: string, view: string)"},"type":{"name":"function(date: ?Date, direction: string, view: string)","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Callback fired when the Calendar navigates between views, or forward and backwards in time.</p>"}}},{"name":"culture","defaultValue":null,"doclets":{},"type":{"name":"string","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Set the culture of the Calendar, passed to the configured localizer.</p>"}}},{"name":"autoFocus","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Pass focus to the Calendar when it mounts.</p>"}}},{"name":"footer","defaultValue":{"value":"true","computed":false},"doclets":{"example":"['prop', ['footer', true]]"},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Show or hide the Calendar footer.</p>"}}},{"name":"dayComponent","defaultValue":null,"doclets":{},"type":{"name":"union","value":["ReactComponent","string"],"raw":"CustomPropTypes.elementType"},"description":{"childMarkdownRemark":{"html":"<p>Provide a custom component to render the days of the month. The Component is provided the following props</p>\n<ul>\n<li><code class=\"language-text\">date</code>: a <code class=\"language-text\">Date</code> object for the day of the month to render</li>\n<li><code class=\"language-text\">label</code>: a formatted <code class=\"language-text\">string</code> of the date to render. To adjust the format of the <code class=\"language-text\">label</code> string use the <code class=\"language-text\">dateFormat</code> prop, listed below.</li>\n</ul>"}}},{"name":"headerFormat","defaultValue":null,"doclets":{"example":"['dateFormat', ['headerFormat', \"{ date: 'medium' }\"]]"},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for the header button of the month view.</p>"}}},{"name":"footerFormat","defaultValue":null,"doclets":{"example":"['dateFormat', ['footerFormat', \"{ date: 'medium' }\", \"date => 'Today is: ' + formatter(date)\"]]"},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for the Calendar footer, formats today's Date as a string.</p>"}}},{"name":"dayFormat","defaultValue":null,"doclets":{"example":"['prop', { dayFormat: \"day => \\n['ðŸŽ‰', 'M', 'T','W','Th', 'F', 'ðŸŽ‰'][day.getDay()]\" }]"},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter calendar days of the week, the default formats each day as a Narrow name: \"Mo\", \"Tu\", etc.</p>"}}},{"name":"dateFormat","defaultValue":null,"doclets":{"example":"['prop', { dateFormat: \"dt => String(dt.getDate())\" }]"},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for day of the month</p>"}}},{"name":"monthFormat","defaultValue":null,"doclets":{"example":"['dateFormat', ['monthFormat', \"{ raw: 'MMMM' }\", null, { defaultView: '\"year\"' }]]"},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for month name.</p>"}}},{"name":"yearFormat","defaultValue":null,"doclets":{"example":"['dateFormat', ['yearFormat', \"{ raw: 'yy' }\", null, { defaultView: '\"decade\"' }]]"},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for month name.</p>"}}},{"name":"decadeFormat","defaultValue":null,"doclets":{},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for decade, the default formats the first and last year of the decade like: 2000 - 2009.</p>"}}},{"name":"centuryFormat","defaultValue":null,"doclets":{},"type":{"name":"union","value":["string","(value: Date, culture: ?string, localizer: Localizer) => string"],"raw":"CustomPropTypes.dateFormat"},"description":{"childMarkdownRemark":{"html":"<p>A formatter for century, the default formats the first and last year of the century like: 1900 - 1999.</p>"}}},{"name":"isRtl","defaultValue":null,"doclets":{},"type":{"name":"bool","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Controls the read direction of the Calendar.</p>\n<p><strong>Tip:</strong> You can also set the direction for all widgets at once, by exposing\n<code class=\"language-text\">isRtl</code> on <a href=\"https://facebook.github.io/react/docs/context.html\">context</a> in a\ncommon parent component, such as your application root.</p>"}}},{"name":"messages","defaultValue":null,"doclets":{},"type":{"name":"shape","value":{"moveBack":{"name":"string","required":false},"moveForward":{"name":"string","required":false}},"raw":null},"description":{"childMarkdownRemark":{"html":"<p>Object hash containing display text and/or text for screen readers.\nUse the <code class=\"language-text\">messages</code> object to localize widget text or provide custom rendering.</p>"}}},{"name":"onKeyDown","defaultValue":null,"doclets":{},"type":{"name":"func","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>The native <code class=\"language-text\">onKeyDown</code> event, called <code class=\"language-text\">preventDefault</code> will prevent any custom behavior, included keyboard shortcuts.</p>"}}},{"name":"tabIndex","defaultValue":{"value":"'0'","computed":false},"doclets":{"ignore":true},"type":{"name":"any","value":null,"raw":null},"description":{"childMarkdownRemark":{"html":"<p>The HTML <code class=\"language-text\">tabindex</code> attribute, controls the order in which focus moves\nvia the TAB key</p>"}}}],"description":{"childMarkdownRemark":{"frontmatter":{"localized":true,"shortcuts":[{"key":"ctrl + down arrow","label":"navigate to next view"},{"key":"ctrl + up arrow","label":"navigate to previous view"},{"key":"ctrl + left arrow","label":"navigate to previous: month, year, decade, or century"},{"key":"ctrl + right arrow","label":"navigate to next: month, year, decade, or century"},{"key":"left arrow","label":"move focus to previous date"},{"key":"right arrow","label":"move focus to next date"},{"key":"up arrow","label":"move focus up within view"},{"key":"down key","label":"move focus down within view"}]},"html":""}}}},"pageContext":{"jsonName":"api-calendar-470","internalComponentName":"ComponentApiCalendar","path":"/api/Calendar/","component":"/Users/jason/src/react-widgets/www/src/templates/component.js","componentChunkName":"component---src-templates-component-js","context":{"displayName":"Calendar","publicComponents":["Combobox","NumberPicker","SelectList","DropdownList","Multiselect","DateTimePicker","Calendar"]},"updatedAt":1531233696560,"pluginCreator___NODE":"Plugin default-site-plugin","pluginCreatorId":"Plugin default-site-plugin","componentPath":"/Users/jason/src/react-widgets/www/src/templates/component.js","displayName":"Calendar","publicComponents":["Combobox","NumberPicker","SelectList","DropdownList","Multiselect","DateTimePicker","Calendar"]}}