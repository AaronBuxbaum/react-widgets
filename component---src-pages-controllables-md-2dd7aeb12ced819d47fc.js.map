{"version":3,"sources":["webpack:///component---src-pages-controllables-md-2dd7aeb12ced819d47fc.js","webpack:///./src/pages/controllables.md","webpack:///./src/examples/open.js"],"names":["webpackJsonp","./node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/jason/src/react-widgets/node_modules/babel-preset-jason/index.js\",{\"debug\":false,\"targets\":{\"browsers\":[\"> 1%\",\"last 4 versions\",\"not ie < 9\"]}}],[\"/Users/jason/src/react-widgets/www/node_modules/babel-preset-env/lib/index.js\",{\"loose\":true,\"uglify\":true,\"modules\":\"commonjs\",\"targets\":{\"browsers\":[\"> 1%\",\"last 2 versions\",\"IE >= 9\"]},\"exclude\":[\"transform-regenerator\",\"transform-es2015-typeof-symbol\"]}],\"/Users/jason/src/react-widgets/www/node_modules/babel-preset-stage-0/lib/index.js\",\"/Users/jason/src/react-widgets/www/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/jason/src/react-widgets/www/node_modules/babel-plugin-remove-graphql-queries/index.js\",\"/Users/jason/src/react-widgets/node_modules/babel-plugin-transform-decorators-legacy/lib/index.js\",\"/Users/jason/src/react-widgets/www/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"cacheDirectory\":true}!./plugins/gatsby-plugin-jsxtreme-markdown/loader.js!./src/pages/controllables.md","module","exports","__webpack_require__","React","Helmet","default","EditableExample","_ref","style","scope","className","createElement","title","codeText","./src/examples/open.js","__esModule","_templateObject","strings","raw","widgetName","_commonTags","stripIndent"],"mappings":"AAAAA,cAAc,2CAERC,yhCACA,SAAUC,EAAQC,EAASC,GAEjC,YCLA,IAAIC,GAAQD,EAAQ,iCAChBE,EAASF,EAAQ,6CAAgBG,QACjCC,EAAkBJ,EAAQ,uCAAiCG,OACzCH,GAAQ,uCAAiCG,OAI/DL,GAAOC,QAAU,SAAAM,GAA2C,GAApBC,IAAoBD,EAA3BE,MAA2BF,EAApBC,OAAOE,EAAaH,EAAbG,SAC7C,OACEP,GAAAQ,cAAA,WAASD,UAAWA,EAAWF,MAAOA,GACpCL,EAAAQ,cAACP,GAAOQ,MAAM,kBACdT,EAAAQ,cAAA,WACJR,EAAAQ,cAAA,oDACAR,EAAAQ,cAAA,gQAEyCR,EAAAQ,cAAA,qBAFzC,4CAEoGR,EAAAQ,cAAA,wBAFpG,kDAIAR,EAAAQ,cAAA,OAAKD,UAAU,mBAAkBP,EAAAQ,cAAA,QAAMD,UAAU,gBAAhB,YAAyC,IAAK,KAAM,KAApD,WAAkE,KAAM,OAAxE,qBAAqG,KAAM,SAA3G,SAA2H,IAA3H,mBAAgJ,IAAK,KAAM,SAA3J,YAA8K,IAA9K,uBAA0M,IAA1M,0BAAsO,IAAtO,IAA4O,IAAK,KAAM,OAAvP,KAAoQ,KAAM,KAA1Q,IAAiR,KAAM,IAAK,OAC7TP,EAAAQ,cAAA,kEAAyDR,EAAAQ,cAAA,qBAAzD,kEACmBR,EAAAQ,cAAA,4BADnB,gDAC2FR,EAAAQ,cAAA,qBAD3F,mBAC2HR,EAAAQ,cAAA,qBAD3H,oFAE4ER,EAAAQ,cAAA,oBAF5E,eAEuGR,EAAAQ,cAAA,qBAFvG,sBAGAR,EAAAQ,cAAA,0SAE8DR,EAAAQ,cAAA,8BAF9D,eAGAR,EAAAQ,cAAA,OAAKD,UAAU,mBAAkBP,EAAAQ,cAAA,QAAMD,UAAU,gBAAhB,YAAyC,IAAK,KAAM,KAApD,WAAkE,KAAM,OAAxE,qBAAqG,KAAM,SAA3G,gBAAkI,IAAlI,UAA8I,IAAK,KAAM,OAAzJ,KAAsK,KAAM,KAA5K,IAAmL,KAAM,IAAK,OAC/NP,EAAAQ,cAAA,0CAAiCR,EAAAQ,cAAA,qBAAjC,8BAA8ER,EAAAQ,cAAA,4BAA9E,mBAAuHR,EAAAQ,cAAA,qBAAvH,oOAGOR,EAAAQ,cAAA,qBAHP,wFAIAR,EAAAQ,cAAA,yDAAgDR,EAAAQ,cAAA,qBAAhD,8EACmBR,EAAAQ,cAAA,4BADnB,mCAC4ER,EAAAQ,cAAA,oBAD5E,8DAGAR,EAAAQ,cAAA,SAAGR,EAAAQ,cAAA,iEAAwDR,EAAAQ,cAAA,6BAC3DR,EAAAQ,cAACL,GAAgBO,SAAUX,EAAQ,0BAAoBG,QAAQ,kBAC/DF,EAAAQ,cAAA,kOD2NIG,yBACA,SAAUd,EAAQC,EAASC,GAEjC,YAGAD,GAAQc,YAAa,CAErB,IAAIC,GAQJ,SAAqCC,EAASC,GAA0B,MAAnBD,GAAQC,IAAMA,EAAYD,IAR5B,eAAgB,yZAA0Z,+MAAgN,eAAgB,yZAA0Z,8MAEvlChB,GAAQI,QEhQO,SAASc,GACtB,SAAAC,EAAAC,aAAAL,EACUG,EAaGA,GAlBf,IAAAC,GAAAlB,EAAA","file":"component---src-pages-controllables-md-2dd7aeb12ced819d47fc.js","sourcesContent":["webpackJsonp([\"component---src-pages-controllables-md\"],{\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"presets\\\":[[\\\"/Users/jason/src/react-widgets/node_modules/babel-preset-jason/index.js\\\",{\\\"debug\\\":false,\\\"targets\\\":{\\\"browsers\\\":[\\\"> 1%\\\",\\\"last 4 versions\\\",\\\"not ie < 9\\\"]}}],[\\\"/Users/jason/src/react-widgets/www/node_modules/babel-preset-env/lib/index.js\\\",{\\\"loose\\\":true,\\\"uglify\\\":true,\\\"modules\\\":\\\"commonjs\\\",\\\"targets\\\":{\\\"browsers\\\":[\\\"> 1%\\\",\\\"last 2 versions\\\",\\\"IE >= 9\\\"]},\\\"exclude\\\":[\\\"transform-regenerator\\\",\\\"transform-es2015-typeof-symbol\\\"]}],\\\"/Users/jason/src/react-widgets/www/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"/Users/jason/src/react-widgets/www/node_modules/babel-preset-react/lib/index.js\\\"],\\\"plugins\\\":[\\\"/Users/jason/src/react-widgets/www/node_modules/babel-plugin-remove-graphql-queries/index.js\\\",\\\"/Users/jason/src/react-widgets/node_modules/babel-plugin-transform-decorators-legacy/lib/index.js\\\",\\\"/Users/jason/src/react-widgets/www/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./plugins/gatsby-plugin-jsxtreme-markdown/loader.js!./src/pages/controllables.md\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar React = __webpack_require__(\"./node_modules/react/react.js\");\nvar Helmet = __webpack_require__(\"./node_modules/react-helmet/lib/Helmet.js\").default;\nvar EditableExample = __webpack_require__(\"./src/components/EditableExample.js\").default;\nvar TabbedCodeBlock = __webpack_require__(\"./src/components/TabbedCodeBlock.js\").default;\n\nvar Tab = function Tab(props) {\n  return React.createElement('div', props);\n};\n\nmodule.exports = function Page(_ref) {\n  var scope = _ref.scope,\n      style = _ref.style,\n      className = _ref.className;\n\n  return React.createElement(\n    'section',\n    { className: className, style: style },\n    React.createElement(Helmet, { title: 'controllables' }),\n    React.createElement(\n      'div',\n      null,\n      React.createElement(\n        'h1',\n        null,\n        'Controlled and Uncontrolled Components'\n      ),\n      React.createElement(\n        'p',\n        null,\n        'One of the strengths of React is its extensibility model, enabled by a common practice of pushing component state as high up the component hierarchy as possible. For simple components (like an input) this is usually a matter of tying the input ',\n        React.createElement(\n          'code',\n          null,\n          'value'\n        ),\n        ' prop to a parent state property via its ',\n        React.createElement(\n          'code',\n          null,\n          'onChange'\n        ),\n        ' handler. here is an extremely common pattern:'\n      ),\n      React.createElement(\n        'pre',\n        { className: 'pg-code-section' },\n        React.createElement(\n          'code',\n          { className: 'language-jsx' },\n          'render() ',\n          \"{\",\n          \"\\n\",\n          \"  \",\n          'return (',\n          \"\\n\",\n          \"    \",\n          '<input type=\\'text\\'',\n          \"\\n\",\n          \"      \",\n          'value=',\n          \"{\",\n          'this.state.value',\n          \"}\",\n          \"\\n\",\n          \"      \",\n          'onChange=',\n          \"{\",\n          ' e => this.setState(',\n          \"{\",\n          ' value: e.target.value ',\n          \"}\",\n          ')',\n          \"}\",\n          \"\\n\",\n          \"    \",\n          '/>',\n          \"\\n\",\n          \"  \",\n          ')',\n          \"\\n\",\n          \"}\",\n          \"\\n\"\n        )\n      ),\n      React.createElement(\n        'p',\n        null,\n        'This pattern moves the responsibility of managing the ',\n        React.createElement(\n          'code',\n          null,\n          'value'\n        ),\n        ' prop from the input Component to its parent. This is called a ',\n        React.createElement(\n          'strong',\n          null,\n          'controlled'\n        ),\n        ' component because the parent is in complete ',\n        React.createElement(\n          'em',\n          null,\n          'control'\n        ),\n        ' of setting the ',\n        React.createElement(\n          'code',\n          null,\n          'value'\n        ),\n        ' prop, in fact the input couldn\\'t change its value even if it wanted to, it will ',\n        React.createElement(\n          'em',\n          null,\n          'always'\n        ),\n        ' render the ',\n        React.createElement(\n          'code',\n          null,\n          'value'\n        ),\n        ' prop it is given.'\n      ),\n      React.createElement(\n        'p',\n        null,\n        'Using controlled components is great for flexibility, and helps keep the data flow going in one direction, but it can become tedious to wire up the components every time, even if you don\\'t need the benefits of controlling it. To mitigate this concern React introduces the concept of an ',\n        React.createElement(\n          'strong',\n          null,\n          'uncontrolled'\n        ),\n        ' Component.'\n      ),\n      React.createElement(\n        'pre',\n        { className: 'pg-code-section' },\n        React.createElement(\n          'code',\n          { className: 'language-jsx' },\n          'render() ',\n          \"{\",\n          \"\\n\",\n          \"  \",\n          'return (',\n          \"\\n\",\n          \"    \",\n          '<input type=\\'text\\'',\n          \"\\n\",\n          \"      \",\n          'defaultValue=',\n          \"{\",\n          '\\'hello\\'',\n          \"}\",\n          \"\\n\",\n          \"    \",\n          '/>',\n          \"\\n\",\n          \"  \",\n          ')',\n          \"\\n\",\n          \"}\",\n          \"\\n\"\n        )\n      ),\n      React.createElement(\n        'p',\n        null,\n        'This input, doesn\\'t provide a ',\n        React.createElement(\n          'code',\n          null,\n          'value'\n        ),\n        ' prop, instead it uses the ',\n        React.createElement(\n          'code',\n          null,\n          'defaultValue'\n        ),\n        ' prop to set an ',\n        React.createElement(\n          'em',\n          null,\n          'initial'\n        ),\n        'value for the input. After that initial setting, the input takes over and manages the value itself requiring no more input from the parent. This is much simpler to set up but, is not conducive to setting the input value from ',\n        React.createElement(\n          'em',\n          null,\n          'outside'\n        ),\n        ' the input. In this case however, that isn\\'t needed so we can leave it uncontrolled.'\n      ),\n      React.createElement(\n        'p',\n        null,\n        'We can extend this pattern to more than just ',\n        React.createElement(\n          'code',\n          null,\n          'value'\n        ),\n        ' props, lots of things can be controlled or uncontrolled. For instance the ',\n        React.createElement(\n          'code',\n          null,\n          'DropdownList'\n        ),\n        ' component lets you control its ',\n        React.createElement(\n          'code',\n          null,\n          'open'\n        ),\n        ' prop for controlling when the dropdown is open or closed.'\n      ),\n      React.createElement(\n        'p',\n        null,\n        React.createElement(\n          'em',\n          null,\n          'hint: also try using the \"default\" form of the prop ',\n          React.createElement(\n            'code',\n            null,\n            'defaultOpen'\n          )\n        )\n      ),\n      React.createElement(EditableExample, { codeText: __webpack_require__(\"./src/examples/open.js\").default('DropdownList') }),\n      React.createElement(\n        'p',\n        null,\n        'When you see that a prop is \"controllable\" you have the option to let the component handle it, or if you need finer grained control over how, and when, that prop updates you can jump in and handle it yourself.'\n      )\n    )\n  );\n};\n\n/***/ }),\n\n/***/ \"./src/examples/open.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _templateObject = _taggedTemplateLiteralLoose([\"\\n    let { \", \" } = ReactWidgets\\n    let colors = ['orange', 'red', 'blue', 'purple'];\\n\\n    class Example extends React.Component {\\n      render() {\\n        let { open } = this.state || {};\\n        let toggleWidget = () => this.setState({ open: !open });\\n\\n        return (\\n          <div>\\n            <button onClick={toggleWidget}>\\n              {open ? 'close' : 'open'}\\n            </button>\\n            <\", \"\\n              open={open}\\n              data={colors}\\n              onToggle={()=>{}}\\n            />\\n          </div>\\n        )\\n      }\\n    };\\n\\n    ReactDOM.render(<Example/>, mountNode);\\n  \"], [\"\\n    let { \", \" } = ReactWidgets\\n    let colors = ['orange', 'red', 'blue', 'purple'];\\n\\n    class Example extends React.Component {\\n      render() {\\n        let { open } = this.state || {};\\n        let toggleWidget = () => this.setState({ open: !open });\\n\\n        return (\\n          <div>\\n            <button onClick={toggleWidget}>\\n              {open ? 'close' : 'open'}\\n            </button>\\n            <\", \"\\n              open={open}\\n              data={colors}\\n              onToggle={()=>{}}\\n            />\\n          </div>\\n        )\\n      }\\n    };\\n\\n    ReactDOM.render(<Example/>, mountNode);\\n  \"]);\n\nexports.default = function (widgetName) {\n  return (0, _commonTags.stripIndent)(_templateObject, widgetName, widgetName);\n};\n\nvar _commonTags = __webpack_require__(\"./node_modules/common-tags/es/index.js\");\n\nfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\n/*** IMPORTS FROM imports-loader ***/\nvar define = false;\nvar __VERSION__ = \"4.0.0\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-controllables-md-2dd7aeb12ced819d47fc.js","var React = require('react')\nvar Helmet = require('react-helmet').default\nvar EditableExample = require('../components/EditableExample').default;\nvar TabbedCodeBlock = require('../components/TabbedCodeBlock').default;\n\nconst Tab = (props) => <div {...props} />\n\nmodule.exports = function Page({ scope, style, className }) {\n  return (\n    <section className={className} style={style}>\n      <Helmet title=\"controllables\" />\n      <div>\n  <h1>Controlled and Uncontrolled Components</h1>\n  <p>One of the strengths of React is its extensibility model, enabled by a common practice of pushing component state\n    as high up the component hierarchy as possible. For simple components (like an input) this\n    is usually a matter of tying the input <code>value</code> prop to a parent state property via its <code>onChange</code> handler.\n    here is an extremely common pattern:</p>\n  <pre className=\"pg-code-section\"><code className=\"language-jsx\">render() {\"{\"}{\"\\n\"}{\"  \"}return ({\"\\n\"}{\"    \"}&lt;input type='text'{\"\\n\"}{\"      \"}value={\"{\"}this.state.value{\"}\"}{\"\\n\"}{\"      \"}onChange={\"{\"} e =&gt; this.setState({\"{\"} value: e.target.value {\"}\"}){\"}\"}{\"\\n\"}{\"    \"}/&gt;{\"\\n\"}{\"  \"}){\"\\n\"}{\"}\"}{\"\\n\"}</code></pre>\n  <p>This pattern moves the responsibility of managing the <code>value</code> prop from the input Component to its parent.\n    This is called a <strong>controlled</strong> component because the parent is in complete <em>control</em> of setting the <code>value</code> prop,\n    in fact the input couldn't change its value even if it wanted to, it will <em>always</em> render the <code>value</code> prop it is given.</p>\n  <p>Using controlled components is great for flexibility, and helps keep the data flow going in one direction,\n    but it can become tedious to wire up the components every time, even if you don't need the benefits of controlling it.\n    To mitigate this concern React introduces the concept of an <strong>uncontrolled</strong> Component.</p>\n  <pre className=\"pg-code-section\"><code className=\"language-jsx\">render() {\"{\"}{\"\\n\"}{\"  \"}return ({\"\\n\"}{\"    \"}&lt;input type='text'{\"\\n\"}{\"      \"}defaultValue={\"{\"}'hello'{\"}\"}{\"\\n\"}{\"    \"}/&gt;{\"\\n\"}{\"  \"}){\"\\n\"}{\"}\"}{\"\\n\"}</code></pre>\n  <p>This input, doesn't provide a <code>value</code> prop, instead it uses the <code>defaultValue</code> prop to set an <em>initial</em>\n    value for the input. After that initial setting, the input takes over and manages the value itself requiring\n    no more input from the parent. This is much simpler to set up but, is not conducive to setting the input value\n    from <em>outside</em> the input. In this case however, that isn't needed so we can leave it uncontrolled.</p>\n  <p>We can extend this pattern to more than just <code>value</code> props, lots of things can be controlled or uncontrolled.\n    For instance the <code>DropdownList</code> component lets you control its <code>open</code> prop for controlling when\n    the dropdown is open or closed.</p>\n  <p><em>hint: also try using the \"default\" form of the prop <code>defaultOpen</code></em></p>\n  <EditableExample codeText={require('../examples/open').default('DropdownList')}/>\n  <p>When you see that a prop is \"controllable\" you have the option to let the component handle it,\n    or if you need finer grained control over how, and when, that prop updates you can jump in and handle it yourself.</p>\n</div>\n\n    </section>\n  )\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/controllables.md","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\nvar __VERSION__ = \"4.0.0\";\n\nimport { stripIndent } from 'common-tags';\n\n\nexport default function(widgetName){\n  return stripIndent`\n    let { ${widgetName} } = ReactWidgets\n    let colors = ['orange', 'red', 'blue', 'purple'];\n\n    class Example extends React.Component {\n      render() {\n        let { open } = this.state || {};\n        let toggleWidget = () => this.setState({ open: !open });\n\n        return (\n          <div>\n            <button onClick={toggleWidget}>\n              {open ? 'close' : 'open'}\n            </button>\n            <${widgetName}\n              open={open}\n              data={colors}\n              onToggle={()=>{}}\n            />\n          </div>\n        )\n      }\n    };\n\n    ReactDOM.render(<Example/>, mountNode);\n  `\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/examples/open.js"],"sourceRoot":""}