webpackJsonp(["path---api-number-picker"],{"./.cache/json/api-number-picker.json":function(e,l){e.exports={data:{componentMetadata:{displayName:"NumberPicker",doclets:{public:!0},props:[{name:"value",defaultValue:{value:"null",computed:!1},doclets:{},type:{name:"number",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Controls the current value of the NumberPicker.</p>"}}},{name:"onChange",defaultValue:null,doclets:{example:"['onChangePicker', [ [1, null] ]]"},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>A callback fired when the current <code>value</code> changes.</p>"}}},{name:"min",defaultValue:{value:"-Infinity",computed:!1},doclets:{example:"['prop', ['min', 0]]"},type:{name:"number",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The minimum number that the NumberPicker value.</p>"}}},{name:"max",defaultValue:{value:"Infinity",computed:!0},doclets:{example:"['prop', ['max', 0]]"},type:{name:"number",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The maximum number that the NumberPicker value.</p>"}}},{name:"step",defaultValue:{value:"1",computed:!1},doclets:{example:"['prop', ['step', 5]]"},type:{name:"number",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Amount to increase or decrease value when using the spinner buttons.</p>"}}},{name:"precision",defaultValue:null,doclets:{},type:{name:"number",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Specify how precise the <code>value</code> should be when typing, incrementing, or decrementing the value.\nWhen empty, precision is parsed from the current <code>format</code> and culture.</p>"}}},{name:"culture",defaultValue:null,doclets:{},type:{name:"string",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Set the culture of the NumberPicker, passed to the configured localizer.</p>"}}},{name:"format",defaultValue:null,doclets:{example:"['prop', { max: 1, min: -1 , defaultValue: 0.2585, format: \"{ style: 'percent' }\" }]"},type:{name:"union",value:["string","(value: number, culture: ?string, localizer: Localizer) => string"],raw:"CustomPropTypes.numberFormat"},description:{childMarkdownRemark:{html:'<p>A format string used to display the number value. Localizer dependent, read <a href="/i18n">localization</a> for more info.</p>'}}},{name:"parse",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Determines how the NumberPicker parses a number from the localized string representation.\nYou can also provide a parser <code>function</code> to pair with a custom <code>format</code>.</p>"}}},{name:"tabIndex",defaultValue:null,doclets:{ignore:!0},type:{name:"any",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The HTML <code>tabindex</code> attribute, controls the order in which focus moves\nvia the TAB key</p>"}}},{name:"name",defaultValue:null,doclets:{},type:{name:"string",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The HTML <code>name</code> attribute, passed directly to the input element.</p>"}}},{name:"placeholder",defaultValue:null,doclets:{},type:{name:"string",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Text to display in the input when the value is empty.</p>"}}},{name:"onKeyDown",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The native <code>onKeyDown</code> event, called <code>preventDefault</code> will prevent any custom behavior, included keyboard shortcuts.</p>"}}},{name:"onKeyPress",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>The native <code>onKeyPress</code> event, called <code>preventDefault</code> will stop any custom behavior.</p>"}}},{name:"onKeyUp",defaultValue:null,doclets:{},type:{name:"func",value:null,raw:null},description:null},{name:"autoFocus",defaultValue:null,doclets:{},type:{name:"bool",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>Pass focus to the NumberPicker when it mounts.</p>"}}},{name:"disabled",defaultValue:null,doclets:{},type:{name:"bool",value:null,raw:"CustomPropTypes.disabled"},description:null},{name:"readOnly",defaultValue:null,doclets:{},type:{name:"bool",value:null,raw:"CustomPropTypes.disabled"},description:{childMarkdownRemark:{html:"<p>Controls the read-only state of the NumberPicker.</p>"}}},{name:"inputProps",defaultValue:null,doclets:{},type:{name:"object",value:null,raw:null},description:{childMarkdownRemark:{html:"<p>An object of props that is passed directly to the underlying input component.</p>"}}},{name:"messages",defaultValue:null,doclets:{},type:{name:"shape",value:{increment:{name:"string",required:!1},decrement:{name:"string",required:!1}},raw:null},description:{childMarkdownRemark:{html:"<p>Object hash containing display text and/or text for screen readers.\nUse the <code>messages</code> object to localize widget text or provide custom rendering.</p>"}}},{name:"open",defaultValue:{value:"false",computed:!1},doclets:{},type:null,description:{childMarkdownRemark:{html:"<p>Controls the visibility of the NumberPicker popup. Use <code>defaultOpen</code>\nto set an initial value for uncontrolled widgets.\nundefined</p>"}}}],description:{childMarkdownRemark:{frontmatter:{shortcuts:[{key:"down arrow",label:"decrement value"},{key:"up arrow",label:"increment value"},{key:"home",label:"set value to minimum value"},{key:"end",label:"set value to maximum value"}]},html:""}}}},pathContext:{displayName:"NumberPicker"}}}});
//# sourceMappingURL=path---api-number-picker-370871856de4325beb0c.js.map