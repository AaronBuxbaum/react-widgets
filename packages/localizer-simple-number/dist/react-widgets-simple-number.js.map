{"version":3,"sources":["webpack:///react-widgets-simple-number.js","webpack:///webpack/bootstrap 4d5a383a7590570a8295","webpack:///./localizer.js","webpack:////Users/jason/src/react-widgets/~/deconstruct-number-format/index.js","webpack:////Users/jason/src/react-widgets/~/format-number-with-string/index.js","webpack:////Users/jason/src/react-widgets/~/format-number/index.js","webpack:///external \"window.ReactWidgets\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","simpleNumber","options","arguments","length","undefined","_defaults$options","_extends","defaults","decimal","grouping","localizer","formats","parse","value","culture","format","data","_deconstructNumberFormat2","negative","negativeLeftSymbol","indexOf","negativeRightSymbol","replace","prefix","suffix","halves","split","decimalChar","integerSeperator","RegExp","decimalsSeparator","pop","join","parseFloat","isNaN","_formatNumberWithString2","precision","maxRight","_configure2","setNumberLocalizer","Object","assign","target","i","source","key","prototype","hasOwnProperty","_configure","_formatNumberWithString","_deconstructNumberFormat","requiredFormat","trim","negativeType","negativeRightPos","negativeLeftPos","test","slice","search","lastIndexOf","absMask","decimalsPart","integerPart","integerSeparator","padLeft","maxLeft","padRight","deconstructedFormat","deconstructNumberFormat","formatFactory","overrideOptions","negativeLeftOut","negativeRightOut","round","truncate","formatter","number","output","charAt","noUnits","push","noSeparator","addDecimalSeparators","addIntegerSeparators","unformat","allowedSeparators","forEach","s","newNumber","negativeOut","separator","separate","x","rgx","padding","buf","substr","places","decim","leadingzeros","substring","window","ReactWidgets"],"mappings":"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","file":"react-widgets-simple-number.js","sourcesContent":["/*! (c) 2014 - present: Jason Quense | https://github.com/jquense/react-widgets/blob/master/LICENSE.md */\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\texports.default = simpleNumber;\n\t\n\tvar _configure = __webpack_require__(4);\n\t\n\tvar _configure2 = _interopRequireDefault(_configure);\n\t\n\tvar _formatNumberWithString = __webpack_require__(2);\n\t\n\tvar _formatNumberWithString2 = _interopRequireDefault(_formatNumberWithString);\n\t\n\tvar _deconstructNumberFormat = __webpack_require__(1);\n\t\n\tvar _deconstructNumberFormat2 = _interopRequireDefault(_deconstructNumberFormat);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar define = false;\n\t\n\tvar defaults = {\n\t  decimal: '.',\n\t  grouping: ','\n\t};\n\t\n\tfunction simpleNumber() {\n\t  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t  var _defaults$options = _extends({}, defaults, options),\n\t      decimal = _defaults$options.decimal,\n\t      grouping = _defaults$options.grouping;\n\t\n\t  var localizer = {\n\t    formats: {\n\t      default: '-#' + grouping + '##0' + decimal\n\t    },\n\t\n\t    // TODO major bump consistent ordering\n\t    parse: function parse(value, culture, format) {\n\t      if (format) {\n\t        var data = (0, _deconstructNumberFormat2.default)(format),\n\t            negative = data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1 || data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1;\n\t\n\t        value = value.replace(data.negativeLeftSymbol, '').replace(data.negativeRightSymbol, '').replace(data.prefix, '').replace(data.suffix, '');\n\t\n\t        var halves = value.split(data.decimalChar);\n\t\n\t        if (data.integerSeperator) halves[0] = halves[0].replace(new RegExp('\\\\' + data.integerSeperator, 'g'));\n\t\n\t        if (data.decimalsSeparator) halves[1] = halves[1].replace(new RegExp('\\\\' + data.decimalsSeparator, 'g'));\n\t\n\t        if (halves[1] === '') halves.pop();\n\t\n\t        value = halves.join('.');\n\t        value = +value;\n\t\n\t        if (negative) value = -1 * value;\n\t      } else value = parseFloat(value);\n\t\n\t      return isNaN(value) ? null : value;\n\t    },\n\t    format: function format(value, _format) {\n\t      return (0, _formatNumberWithString2.default)(value, _format);\n\t    },\n\t    decimalChar: function decimalChar(format) {\n\t      return format && (0, _deconstructNumberFormat2.default)(format).decimalsSeparator || '.';\n\t    },\n\t    precision: function precision(format) {\n\t      var data = (0, _deconstructNumberFormat2.default)(format);\n\t      return data.maxRight !== -1 ? data.maxRight : null;\n\t    }\n\t  };\n\t\n\t  _configure2.default.setNumberLocalizer(localizer);\n\t  return localizer;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar define = false;\n\t\n\t'use strict';\r\n\t\r\n\t\r\n\texports = module.exports = function deconstructNumberFormat(requiredFormat) {\r\n\t\r\n\t\r\n\t  var format= requiredFormat || '-9,999.90';\r\n\t\r\n\t  format=format.trim(); //ignore leading and trailing spaces\r\n\t  \r\n\t  // *********************************************************************************\r\n\t  // find position and type of negative and contents of prefix and suffix text\r\n\t  // *********************************************************************************\r\n\t  \r\n\t  var negativeType = '', negativeRightSymbol = '', negativeLeftSymbol = '',\r\n\t      negativeRightPos = -1, negativeLeftPos = -1, \r\n\t      absFormat,\r\n\t      prefix = '', suffix = '';\r\n\t  \r\n\t  // brackets as negative\r\n\t  if (/^([^()]+)?[(]([^09#]+)?[09#., ]+([^)]+)?[)](.+)?$/.test(format)) {\r\n\t    negativeType = 'brackets';\r\n\t    negativeLeftPos = format.indexOf(\"(\");\r\n\t    negativeLeftSymbol = '('\r\n\t    if (negativeLeftPos > 0) { //after prefix\r\n\t      prefix = format.slice(0, negativeLeftPos);\r\n\t    } else {\r\n\t      prefix = format.search(/0|9|#/) > 0 ? format.slice(1, format.search(/0|9|#/)) : \"\";\r\n\t    }\r\n\t    format = format.slice(prefix.length+1);\r\n\t\r\n\t    negativeRightPos = format.indexOf(\")\");\r\n\t    negativeRightSymbol = ')'\r\n\t    if (negativeRightPos < format.length-1) { //before prefix\r\n\t      suffix = format.slice(negativeRightPos+1);\r\n\t      format = format.slice(0, negativeRightPos);\r\n\t    } else {\r\n\t      suffix = format.search(/[^09#,.]([^09#](.+)?)?[)]$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?[)]$/), -1) : \"\";\r\n\t      format = format.slice(0, format.length - suffix.length - 1);\r\n\t      negativeRightPos = 0;\r\n\t    }\r\n\t\r\n\t  } else if (format.indexOf(\"-\") === -1){\r\n\t    //positive values only\r\n\t    negativeType = 'none';\r\n\t    prefix = format.search(/[.,]?[09#]/) > 0 ? format.slice(0, format.search(/[.,]?[09#]/)) : \"\";\r\n\t    format = format.slice(prefix.length);\r\n\t    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n\t    format = format.slice(0, format.length-suffix.length);\r\n\t\r\n\t  } else if (/^([^09#-]+)?-.+$/.test(format)) {\r\n\t    //negative symbol to left of number (before or after prefix)\r\n\t    negativeType = 'left';\r\n\t    negativeLeftPos = format.indexOf(\"-\");\r\n\t    negativeLeftSymbol = '-'\r\n\t    if (negativeLeftPos > 0) { //after prefix\r\n\t      prefix = format.slice(0, negativeLeftPos);\r\n\t    } else {\r\n\t      prefix = format.search(/[09#]/) > 0 ? format.slice(1, format.search(/[09#]/)) : \"\";\r\n\t    }\r\n\t    format = format.slice(prefix.length+1);\r\n\t    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n\t    format = format.slice(0, format.length-suffix.length);\r\n\t\r\n\t  } else {\r\n\t    //negative symbol to right of number (before or after suffix)\r\n\t    prefix = format.search(/[09#]/) > 0 ? format.slice(0, format.search(/[09#]/)) : \"\";\r\n\t    format = format.slice(prefix.length);\r\n\t    negativeType = 'right';\r\n\t    negativeRightSymbol = '-'\r\n\t    negativeRightPos = format.lastIndexOf(\"-\");\r\n\t    if (negativeRightPos < format.length-1) { //before suffix\r\n\t      suffix = format.slice(negativeRightPos+1);\r\n\t      format = format.slice(0, negativeRightPos);\r\n\t    } else {\r\n\t      suffix = format.search(/[^09#,.]([^09#](.+)?)?-$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?-$/), format.length-1) : \"\";\r\n\t      format = format.slice(0, format.length - suffix.length - 1);\r\n\t      negativeRightPos = 0;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  // *********************************************************************************\r\n\t  //include spaces with negative symbols\r\n\t  // *********************************************************************************\r\n\t\r\n\t  //When negative is before prefix move spaces from start of prefix to end of negative symbol\r\n\t  while (negativeLeftPos === 0 && prefix && prefix[0] === ' ') {\r\n\t    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n\t    prefix = prefix.slice(1);\r\n\t  }\r\n\t\r\n\t  //When negative follows suffix move spaces end of suffix to start of negative symbol\r\n\t  while (negativeRightPos === 0 && suffix && suffix[suffix.length-1] === ' ') {\r\n\t    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n\t    suffix = suffix.slice(0, -1);\r\n\t  }\r\n\t\r\n\t  //When negative follows prefix move spaces from start of format to end of negative symbol\r\n\t  while (negativeLeftPos > 0 && format.length && format[0] === ' ') {\r\n\t    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n\t    format = format.slice(1);\r\n\t  }\r\n\t\r\n\t  //When negative before suffix move spaces from end of format to start of negative symbol\r\n\t  while (negativeRightPos > 0 && format.length && format[format.length-1] === ' ') {\r\n\t    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n\t    format = format.slice(0, -1);\r\n\t  }\r\n\t\r\n\t  var absMask = format;\r\n\t\r\n\t  // *********************************************************************************\r\n\t  //find the decimal character and parts of absolute format\r\n\t  // *********************************************************************************\r\n\t\r\n\t  var decimalChar = '', decimalsPart = '', integerPart = '', decimalsSeparator = '', integerSeparator = '';\r\n\t\r\n\t  //if last char is a ',' and there are no other commas then use this as decimal point\r\n\t  if (format[format.length-1] === ',' && format.indexOf(',') === format.length-1) {\r\n\t    decimalChar = ',';\r\n\t  //otherwise use consider '.'\r\n\t  } else if (format.indexOf('.') > -1) {\r\n\t    if (format.indexOf('.') === format.lastIndexOf('.')) {\r\n\t      decimalChar = \".\";\r\n\t    } else {\r\n\t      // two of '.' means this must be the separator, so assume  ',' is the decimal\r\n\t      decimalChar = ',';\r\n\t    }\r\n\t  //otherwise use ',' if it exists and there is only one\r\n\t  } else if (format.indexOf(',') > -1) {\r\n\t    if (format.indexOf(',') === format.lastIndexOf(',')) {\r\n\t      decimalChar = ',';\r\n\t    } else {\r\n\t      decimalChar = '.';\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (decimalChar && format.indexOf(decimalChar)>-1) {\r\n\t    decimalsPart = format.slice(format.indexOf(decimalChar)+1);\r\n\t    integerPart = format.slice(0,format.indexOf(decimalChar));\r\n\t  } else {\r\n\t    integerPart = format;\r\n\t    decimalsPart = '';\r\n\t  }\r\n\t\r\n\t  while (decimalsPart.length && decimalsPart.search(/[., ]$/) > -1) {\r\n\t    decimalsPart = decimalsPart.slice(0, -1);\r\n\t  }\r\n\t\r\n\t  while (integerPart.length && integerPart[0].search(/[., ]/) > -1) {\r\n\t    integerPart = integerPart.slice(1);\r\n\t  }\r\n\t\r\n\t  //find the thousands/thousanths separators\r\n\t  if (integerPart && integerPart.search(/[., ]/) > 0) {\r\n\t    integerSeparator = integerPart[integerPart.search(/[., ]/)];\r\n\t    integerPart = integerPart.replace(/[., ]/g, \"\");\r\n\t  }\r\n\t\r\n\t  if (decimalsPart && decimalsPart.search(/[., ]/) > 0) {\r\n\t    decimalsSeparator = decimalsPart[decimalsPart.search(/[., ]/)];\r\n\t    decimalsPart = decimalsPart.replace(/[., ]/g, \"\");\r\n\t  }\r\n\t\r\n\t  if ((integerPart.length && !(/^[09#]+$/).test(integerPart)) || (decimalsPart.length && !(/^[09#]+$/).test(decimalsPart))) {return false};\r\n\t\r\n\t  // *********************************************************************************\r\n\t  //resolve length and padding\r\n\t  // *********************************************************************************\r\n\t\r\n\t  var padLeft, maxLeft, padRight, maxRight;\r\n\t  padLeft = integerPart.indexOf(\"0\") >= 0 ? integerPart.length - integerPart.indexOf(\"0\") : -1;\r\n\t  maxLeft = integerPart.length === 0 ||integerPart[0] === \"0\" || integerPart[0] === \"9\" ? integerPart.length : -1;\r\n\t  padRight = decimalsPart.indexOf(\"0\") >= 0 ? decimalsPart.lastIndexOf(\"0\")+1 : -1;\r\n\t  maxRight = decimalsPart.length === 0 || decimalsPart[decimalsPart.length-1] === \"0\" || decimalsPart[decimalsPart.length-1] === \"9\" ? decimalsPart.length : -1;\r\n\t\r\n\t  // *********************************************************************************\r\n\t  // output\r\n\t  // *********************************************************************************\r\n\t\r\n\t  var deconstructedFormat = {\r\n\t    negativeType: negativeType,\r\n\t    negativeLeftPos: negativeLeftPos,\r\n\t    negativeRightPos: negativeRightPos,\r\n\t    negativeLeftSymbol: negativeLeftSymbol,\r\n\t    negativeRightSymbol: negativeRightSymbol,\r\n\t    suffix: suffix,\r\n\t    prefix: prefix,\r\n\t    absMask: absMask,\r\n\t    decimalChar: decimalChar,\r\n\t    integerSeparator: integerSeparator,\r\n\t    decimalsSeparator: decimalsSeparator,\r\n\t    padLeft: padLeft,\r\n\t    maxLeft: maxLeft,\r\n\t    padRight: padRight,\r\n\t    maxRight: maxRight\r\n\t  }\r\n\t\r\n\t  return deconstructedFormat;\r\n\t};\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar define = false;\n\t\n\t'use strict';\r\n\t\r\n\tvar deconstructNumberFormat = __webpack_require__(1);\r\n\tvar formatFactory = __webpack_require__(3);\r\n\t\r\n\texports = module.exports = function formatNumberWithString(value, requiredFormat, overrideOptions) {\r\n\t\r\n\t  var deconstructedFormat = []\r\n\t\r\n\t  if (requiredFormat) deconstructedFormat = deconstructNumberFormat(requiredFormat.trim());\r\n\t  \r\n\t  value = (value === null ? '' : value);\r\n\t  value = value + ''; //make a string\r\n\t  value = value.length ? value.trim() : '';\r\n\t  \r\n\t  var options = [];\r\n\t  \r\n\t  var format = formatFactory({\r\n\t    negativeType: deconstructedFormat.negativeType,\r\n\t    negativeLeftSymbol: deconstructedFormat.negativeLeftSymbol,\r\n\t    negativeRightSymbol: deconstructedFormat.negativeRightSymbol,\r\n\t    negativeLeftOut: deconstructedFormat.negativeLeftPos === 0,\r\n\t    negativeRightOut: deconstructedFormat.negativeRightPos === 0,\r\n\t    prefix: deconstructedFormat.prefix,\r\n\t    suffix: deconstructedFormat.suffix,\r\n\t    integerSeparator: deconstructedFormat.integerSeparator,\r\n\t    decimalsSeparator: deconstructedFormat.decimalsSeparator,\r\n\t    decimal: deconstructedFormat.decimalChar,\r\n\t    padLeft: deconstructedFormat.padLeft,\r\n\t    padRight: deconstructedFormat.padRight,\r\n\t    round: deconstructedFormat.maxRight,\r\n\t    truncate: null\r\n\t  })\r\n\t\r\n\t  return format(value, overrideOptions);\r\n\t\r\n\t};\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/*** IMPORTS FROM imports-loader ***/\n\tvar define = false;\n\t\n\t\n\tmodule.exports = formatter;\n\t\n\tfunction formatter(options) {\n\t  options = options || {};\n\t\n\t\n\t  // *********************************************************************************************\n\t  // Set defaults for negatives\n\t  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n\t  // *********************************************************************************************\n\t\n\t  // type of negative; default left\n\t  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\t\n\t  // negative symbols '-' or '()'\n\t  if (typeof options.negativeLeftSymbol !== 'string') {\n\t    switch (options.negativeType) {\n\t      case 'left':\n\t        options.negativeLeftSymbol = '-';\n\t        break;\n\t      case 'brackets':\n\t        options.negativeLeftSymbol = '(';\n\t        break;\n\t      default:\n\t        options.negativeLeftSymbol = '';\n\t    }\n\t  }\n\t  if (typeof options.negativeRightSymbol !== 'string') {\n\t    switch (options.negativeType) {\n\t      case 'right':\n\t        options.negativeRightSymbol = '-';\n\t        break;\n\t      case 'brackets':\n\t        options.negativeRightSymbol = ')';\n\t        break;\n\t      default:\n\t        options.negativeRightSymbol = '';\n\t    }\n\t  }\n\t\n\t  // whether negative symbol should be inside/outside prefix and suffix\n\t\n\t  if (typeof options.negativeLeftOut !== \"boolean\") {\n\t    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n\t  }\n\t  if (typeof options.negativeRightOut !== \"boolean\") {\n\t    options.negativeRightOut = (options.negativeOut === false ? false : true);\n\t  }\n\t\n\t  //prefix and suffix\n\t  options.prefix = options.prefix || '';\n\t  options.suffix = options.suffix || '';\n\t\n\t  //separators\n\t  if (typeof options.integerSeparator !== 'string') {\n\t    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n\t  }\n\t  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n\t  options.decimal = options.decimal || '.';\n\t\n\t  //padders\n\t  options.padLeft = options.padLeft || -1 //default no padding\n\t  options.padRight = options.padRight || -1 //default no padding\n\t\n\t  function format(number, overrideOptions) {\n\t    overrideOptions = overrideOptions || {};\n\t\n\t    if (number || number === 0) {\n\t      number = '' + number;//convert number to string if it isn't already\n\t    } else {\n\t      return '';\n\t    }\n\t\n\t    //identify a negative number and make it absolute\n\t    var output = [];\n\t    var negative = number.charAt(0) === '-';\n\t    number = number.replace(/^\\-/g, '');\n\t\n\t    //Prepare output with left hand negative and/or prefix\n\t    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n\t      output.push(options.prefix);\n\t    }\n\t    if (negative) {\n\t      output.push(options.negativeLeftSymbol);\n\t    }\n\t    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n\t      output.push(options.prefix);\n\t    }\n\t\n\t    //Format core number\n\t    number = number.split('.');\n\t    if (options.round != null) round(number, options.round);\n\t    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n\t    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n\t    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n\t    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n\t    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n\t    output.push(number[0]);\n\t    if (number[1]) {\n\t      output.push(options.decimal);\n\t      output.push(number[1]);\n\t    }\n\t\n\t    //Prepare output with right hand negative and/or prefix\n\t    if (options.negativeRightOut && !overrideOptions.noUnits) {\n\t      output.push(options.suffix);\n\t    }\n\t    if (negative) {\n\t      output.push(options.negativeRightSymbol);\n\t    }\n\t    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n\t      output.push(options.suffix);\n\t    }\n\t\n\t    //join output and return\n\t    return output.join('');\n\t  }\n\t\n\t  format.negative = options.negative;\n\t  format.negativeOut = options.negativeOut;\n\t  format.negativeType = options.negativeType;\n\t  format.negativeLeftOut = options.negativeLeftOut;\n\t  format.negativeLeftSymbol = options.negativeLeftSymbol;\n\t  format.negativeRightOut = options.negativeRightOut;\n\t  format.negativeRightSymbol = options.negativeRightSymbol;\n\t  format.prefix = options.prefix;\n\t  format.suffix = options.suffix;\n\t  format.separate = options.separate;\n\t  format.integerSeparator = options.integerSeparator;\n\t  format.decimalsSeparator = options.decimalsSeparator;\n\t  format.decimal = options.decimal;\n\t  format.padLeft = options.padLeft;\n\t  format.padRight = options.padRight;\n\t  format.truncate = options.truncate;\n\t  format.round = options.round;\n\t\n\t  function unformat(number, allowedSeparators) {\n\t    allowedSeparators = allowedSeparators || [];\n\t    if (options.allowedSeparators) {\n\t      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n\t    }\n\t    allowedSeparators.push(options.integerSeparator);\n\t    allowedSeparators.push(options.decimalsSeparator);\n\t    number = number.replace(options.prefix, '');\n\t    number = number.replace(options.suffix, '');\n\t    var newNumber = number;\n\t    do {\n\t      number = newNumber;\n\t      for (var i = 0; i < allowedSeparators.length; i++) {\n\t        newNumber = newNumber.replace(allowedSeparators[i], '');\n\t      }\n\t    } while (newNumber != number);\n\t    return number;\n\t  }\n\t  format.unformat = unformat;\n\t\n\t  function validate(number, allowedSeparators) {\n\t    number = unformat(number, allowedSeparators);\n\t    number = number.split(options.decimal);\n\t    if (number.length > 2) {\n\t      return false;\n\t    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n\t      return false;\n\t    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n\t      return false;\n\t    } else {\n\t      return /^-?\\d+\\.?\\d*$/.test(number);\n\t    }\n\t  }\n\t  return format;\n\t}\n\t\n\t//where x is already the integer part of the number\n\tfunction addIntegerSeparators(x, separator) {\n\t  x += '';\n\t  if (!separator) return x;\n\t  var rgx = /(\\d+)(\\d{3})/;\n\t  while (rgx.test(x)) {\n\t    x = x.replace(rgx, '$1' + separator + '$2');\n\t  }\n\t  return x;\n\t}\n\t\n\t//where x is already the decimal part of the number\n\tfunction addDecimalSeparators(x, separator) {\n\t  x += '';\n\t  if (!separator) return x;\n\t  var rgx = /(\\d{3})(\\d+)/;\n\t  while (rgx.test(x)) {\n\t    x = x.replace(rgx, '$1' + separator + '$2');\n\t  }\n\t  return x;\n\t}\n\t\n\t//where x is the integer part of the number\n\tfunction padLeft(x, padding) {\n\t  x = x + '';\n\t  var buf = [];\n\t  while (buf.length + x.length < padding) {\n\t    buf.push('0');\n\t  }\n\t  return buf.join('') + x;\n\t}\n\t\n\t//where x is the decimals part of the number\n\tfunction padRight(x, padding) {\n\t  if (x) {\n\t    x += '';\n\t  } else {\n\t    x = '';\n\t  }\n\t  var buf = [];\n\t  while (buf.length + x.length < padding) {\n\t    buf.push('0');\n\t  }\n\t  return x + buf.join('');\n\t}\n\tfunction truncate(x, length) {\n\t  if (x) {\n\t    x += '';\n\t  }\n\t  if (x && x.length > length) {\n\t    return x.substr(0, length);\n\t  } else {\n\t    return x;\n\t  }\n\t}\n\t\n\t//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\n\tfunction round(number, places) {\n\t  if (number[1] && places >= 0 && number[1].length > places) {\n\t    //truncate to correct number of decimal places\n\t    var decim = number[1].slice(0, places);\n\t    //if next digit was >= 5 we need to round up\n\t    if (+(number[1].substr(places, 1)) >= 5) {\n\t      //But first count leading zeros as converting to a number will loose them\n\t      var leadingzeros = \"\";\n\t      while (decim.charAt(0)===\"0\") {\n\t        leadingzeros = leadingzeros + \"0\";\n\t        decim = decim.substr(1);\n\t      }\n\t      //Then we can change decim to a number and add 1 before replacing leading zeros\n\t      decim = (+decim + 1) + '';\n\t      decim = leadingzeros + decim;\n\t      if (decim.length > places) {\n\t        //adding one has made it longer\n\t        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n\t        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n\t      }\n\t    }\n\t    number[1] = decim;\n\t  }\n\t  return number;\n\t}\n\t\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = window.ReactWidgets;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// react-widgets-simple-number.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d5a383a7590570a8295","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\nimport configure from 'react-widgets/lib/configure';\nimport formatNumber from 'format-number-with-string';\nimport deconstruct from 'deconstruct-number-format';\n\nlet defaults = {\n  decimal: '.',\n  grouping: ','\n}\n\nexport default function simpleNumber(options = {}) {\n  let { decimal, grouping } = { ...defaults, ...options }\n\n  let localizer = {\n    formats: {\n      default: `-#${grouping}##0${decimal}`\n    },\n\n    // TODO major bump consistent ordering\n    parse(value, culture, format) {\n      if (format) {\n        let data = deconstruct(format)\n          , negative = (data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1)\n                    || (data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1)\n\n        value = value\n          .replace(data.negativeLeftSymbol, '')\n          .replace(data.negativeRightSymbol, '')\n          .replace(data.prefix, '')\n          .replace(data.suffix, '')\n\n        let halves = value.split(data.decimalChar)\n\n        if (data.integerSeperator)\n          halves[0] = halves[0].replace(new RegExp('\\\\' + data.integerSeperator, 'g'))\n\n        if (data.decimalsSeparator)\n          halves[1] = halves[1].replace(new RegExp('\\\\' + data.decimalsSeparator, 'g'))\n\n        if (halves[1] === '') halves.pop();\n\n        value = halves.join('.')\n        value = +value\n\n        if (negative)\n          value = -1 * value\n      }\n      else\n        value = parseFloat(value)\n\n      return isNaN(value) ? null : value\n    },\n\n    format(value, format) {\n      return formatNumber(value, format)\n    },\n\n    decimalChar(format) {\n      return format && deconstruct(format).decimalsSeparator || '.'\n    },\n\n    precision(format) {\n      let data = deconstruct(format)\n      return data.maxRight !== -1 ? data.maxRight : null\n    }\n  }\n\n  configure.setNumberLocalizer(localizer)\n  return localizer\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./localizer.js","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n'use strict';\r\n\r\n\r\nexports = module.exports = function deconstructNumberFormat(requiredFormat) {\r\n\r\n\r\n  var format= requiredFormat || '-9,999.90';\r\n\r\n  format=format.trim(); //ignore leading and trailing spaces\r\n  \r\n  // *********************************************************************************\r\n  // find position and type of negative and contents of prefix and suffix text\r\n  // *********************************************************************************\r\n  \r\n  var negativeType = '', negativeRightSymbol = '', negativeLeftSymbol = '',\r\n      negativeRightPos = -1, negativeLeftPos = -1, \r\n      absFormat,\r\n      prefix = '', suffix = '';\r\n  \r\n  // brackets as negative\r\n  if (/^([^()]+)?[(]([^09#]+)?[09#., ]+([^)]+)?[)](.+)?$/.test(format)) {\r\n    negativeType = 'brackets';\r\n    negativeLeftPos = format.indexOf(\"(\");\r\n    negativeLeftSymbol = '('\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/0|9|#/) > 0 ? format.slice(1, format.search(/0|9|#/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n\r\n    negativeRightPos = format.indexOf(\")\");\r\n    negativeRightSymbol = ')'\r\n    if (negativeRightPos < format.length-1) { //before prefix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?[)]$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?[)]$/), -1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n\r\n  } else if (format.indexOf(\"-\") === -1){\r\n    //positive values only\r\n    negativeType = 'none';\r\n    prefix = format.search(/[.,]?[09#]/) > 0 ? format.slice(0, format.search(/[.,]?[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else if (/^([^09#-]+)?-.+$/.test(format)) {\r\n    //negative symbol to left of number (before or after prefix)\r\n    negativeType = 'left';\r\n    negativeLeftPos = format.indexOf(\"-\");\r\n    negativeLeftSymbol = '-'\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/[09#]/) > 0 ? format.slice(1, format.search(/[09#]/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else {\r\n    //negative symbol to right of number (before or after suffix)\r\n    prefix = format.search(/[09#]/) > 0 ? format.slice(0, format.search(/[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    negativeType = 'right';\r\n    negativeRightSymbol = '-'\r\n    negativeRightPos = format.lastIndexOf(\"-\");\r\n    if (negativeRightPos < format.length-1) { //before suffix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?-$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?-$/), format.length-1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n  }\r\n\r\n  // *********************************************************************************\r\n  //include spaces with negative symbols\r\n  // *********************************************************************************\r\n\r\n  //When negative is before prefix move spaces from start of prefix to end of negative symbol\r\n  while (negativeLeftPos === 0 && prefix && prefix[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    prefix = prefix.slice(1);\r\n  }\r\n\r\n  //When negative follows suffix move spaces end of suffix to start of negative symbol\r\n  while (negativeRightPos === 0 && suffix && suffix[suffix.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    suffix = suffix.slice(0, -1);\r\n  }\r\n\r\n  //When negative follows prefix move spaces from start of format to end of negative symbol\r\n  while (negativeLeftPos > 0 && format.length && format[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    format = format.slice(1);\r\n  }\r\n\r\n  //When negative before suffix move spaces from end of format to start of negative symbol\r\n  while (negativeRightPos > 0 && format.length && format[format.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    format = format.slice(0, -1);\r\n  }\r\n\r\n  var absMask = format;\r\n\r\n  // *********************************************************************************\r\n  //find the decimal character and parts of absolute format\r\n  // *********************************************************************************\r\n\r\n  var decimalChar = '', decimalsPart = '', integerPart = '', decimalsSeparator = '', integerSeparator = '';\r\n\r\n  //if last char is a ',' and there are no other commas then use this as decimal point\r\n  if (format[format.length-1] === ',' && format.indexOf(',') === format.length-1) {\r\n    decimalChar = ',';\r\n  //otherwise use consider '.'\r\n  } else if (format.indexOf('.') > -1) {\r\n    if (format.indexOf('.') === format.lastIndexOf('.')) {\r\n      decimalChar = \".\";\r\n    } else {\r\n      // two of '.' means this must be the separator, so assume  ',' is the decimal\r\n      decimalChar = ',';\r\n    }\r\n  //otherwise use ',' if it exists and there is only one\r\n  } else if (format.indexOf(',') > -1) {\r\n    if (format.indexOf(',') === format.lastIndexOf(',')) {\r\n      decimalChar = ',';\r\n    } else {\r\n      decimalChar = '.';\r\n    }\r\n  }\r\n\r\n  if (decimalChar && format.indexOf(decimalChar)>-1) {\r\n    decimalsPart = format.slice(format.indexOf(decimalChar)+1);\r\n    integerPart = format.slice(0,format.indexOf(decimalChar));\r\n  } else {\r\n    integerPart = format;\r\n    decimalsPart = '';\r\n  }\r\n\r\n  while (decimalsPart.length && decimalsPart.search(/[., ]$/) > -1) {\r\n    decimalsPart = decimalsPart.slice(0, -1);\r\n  }\r\n\r\n  while (integerPart.length && integerPart[0].search(/[., ]/) > -1) {\r\n    integerPart = integerPart.slice(1);\r\n  }\r\n\r\n  //find the thousands/thousanths separators\r\n  if (integerPart && integerPart.search(/[., ]/) > 0) {\r\n    integerSeparator = integerPart[integerPart.search(/[., ]/)];\r\n    integerPart = integerPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if (decimalsPart && decimalsPart.search(/[., ]/) > 0) {\r\n    decimalsSeparator = decimalsPart[decimalsPart.search(/[., ]/)];\r\n    decimalsPart = decimalsPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if ((integerPart.length && !(/^[09#]+$/).test(integerPart)) || (decimalsPart.length && !(/^[09#]+$/).test(decimalsPart))) {return false};\r\n\r\n  // *********************************************************************************\r\n  //resolve length and padding\r\n  // *********************************************************************************\r\n\r\n  var padLeft, maxLeft, padRight, maxRight;\r\n  padLeft = integerPart.indexOf(\"0\") >= 0 ? integerPart.length - integerPart.indexOf(\"0\") : -1;\r\n  maxLeft = integerPart.length === 0 ||integerPart[0] === \"0\" || integerPart[0] === \"9\" ? integerPart.length : -1;\r\n  padRight = decimalsPart.indexOf(\"0\") >= 0 ? decimalsPart.lastIndexOf(\"0\")+1 : -1;\r\n  maxRight = decimalsPart.length === 0 || decimalsPart[decimalsPart.length-1] === \"0\" || decimalsPart[decimalsPart.length-1] === \"9\" ? decimalsPart.length : -1;\r\n\r\n  // *********************************************************************************\r\n  // output\r\n  // *********************************************************************************\r\n\r\n  var deconstructedFormat = {\r\n    negativeType: negativeType,\r\n    negativeLeftPos: negativeLeftPos,\r\n    negativeRightPos: negativeRightPos,\r\n    negativeLeftSymbol: negativeLeftSymbol,\r\n    negativeRightSymbol: negativeRightSymbol,\r\n    suffix: suffix,\r\n    prefix: prefix,\r\n    absMask: absMask,\r\n    decimalChar: decimalChar,\r\n    integerSeparator: integerSeparator,\r\n    decimalsSeparator: decimalsSeparator,\r\n    padLeft: padLeft,\r\n    maxLeft: maxLeft,\r\n    padRight: padRight,\r\n    maxRight: maxRight\r\n  }\r\n\r\n  return deconstructedFormat;\r\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jason/src/react-widgets/~/deconstruct-number-format/index.js\n// module id = 1\n// module chunks = 0","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n'use strict';\r\n\r\nvar deconstructNumberFormat = require('deconstruct-number-format');\r\nvar formatFactory = require('format-number');\r\n\r\nexports = module.exports = function formatNumberWithString(value, requiredFormat, overrideOptions) {\r\n\r\n  var deconstructedFormat = []\r\n\r\n  if (requiredFormat) deconstructedFormat = deconstructNumberFormat(requiredFormat.trim());\r\n  \r\n  value = (value === null ? '' : value);\r\n  value = value + ''; //make a string\r\n  value = value.length ? value.trim() : '';\r\n  \r\n  var options = [];\r\n  \r\n  var format = formatFactory({\r\n    negativeType: deconstructedFormat.negativeType,\r\n    negativeLeftSymbol: deconstructedFormat.negativeLeftSymbol,\r\n    negativeRightSymbol: deconstructedFormat.negativeRightSymbol,\r\n    negativeLeftOut: deconstructedFormat.negativeLeftPos === 0,\r\n    negativeRightOut: deconstructedFormat.negativeRightPos === 0,\r\n    prefix: deconstructedFormat.prefix,\r\n    suffix: deconstructedFormat.suffix,\r\n    integerSeparator: deconstructedFormat.integerSeparator,\r\n    decimalsSeparator: deconstructedFormat.decimalsSeparator,\r\n    decimal: deconstructedFormat.decimalChar,\r\n    padLeft: deconstructedFormat.padLeft,\r\n    padRight: deconstructedFormat.padRight,\r\n    round: deconstructedFormat.maxRight,\r\n    truncate: null\r\n  })\r\n\r\n  return format(value, overrideOptions);\r\n\r\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jason/src/react-widgets/~/format-number-with-string/index.js\n// module id = 2\n// module chunks = 0","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n\nmodule.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jason/src/react-widgets/~/format-number/index.js\n// module id = 3\n// module chunks = 0","module.exports = window.ReactWidgets;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"window.ReactWidgets\"\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}